pipeline {

  environment {
    registry = "ariomer/edutest"
    registryCredential = 'dockerhub'
    dockerImage = ''
    SERVICE_NAME="iam-service"
    SERVICE_PORT="9001"
    SERVICE_TEST_NETWORK="kypnt-test"
    LOGSTASH_URI="udp://192.168.122.200:5000"
    tries = 0
    sonarResultStatus = "PENDING"
  }
 
  //def SERVICE_NAME="iam-service"
  //def SERVICE_PORT="9001"
  //def SERVICE_TEST_NETWORK="kypnt-test"
  //def LOGSTASH_URI="udp://192.168.122.200:5000"
  
  //def tries = 0
  //sonarResultStatus = "PENDING"
 
  stage('SCM') {
    checkout scm
  }
  
  timeout(unit: 'SECONDS', time: 300) {
    stage('SonarQube Analysis') {
	  def mvn = tool 'Default Maven';
      withSonarQubeEnv() {
        sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=test-sonarqube"
      }
    }
  }
  

  stage('Quality Gate') {
     withSonarQubeEnv() {
        while ((sonarResultStatus == "PENDING" || sonarResultStatus == "IN_PROGRESS") && tries++ < 5) {
           try {
               sonarResult = waitForQualityGate abortPipeline: true
               sonarResultStatus = sonarResult.status
           } catch(ex) {
               echo "caught exception ${ex}"
           } finally {
               sonarResultStatus = 'OK'
           }
        }
     }
  }

 
  if (sonarResultStatus != 'OK') {  
    error "Quality gate failure for SonarQube: ${sonarResultStatus}"
  } else {
  
     echo "waitForQualityGate status is ${sonarResultStatus} (tries=${tries})"
     echo 'Quality Gate: SUCCESS'

     stage('Build Gradle') {
         echo "Build Project ..."
         sh "./gradlew clean build"
         echo "Pull out jar to workdir"
         sh "cp ./build/libs/*.jar ."
     }

     stage('Build Container Image And Run') {
          echo "Stopping Service..."
          // sh "docker stop ${SERVICE_NAME} || true"
          echo "Removing Container..."
          // sh "docker rm -f \$(docker ps -aqf \"name=${SERVICE_NAME}\") || true"
          echo "Removing Image..."
          // sh "docker rmi \$(docker images | grep '${SERVICE_NAME}') || true"
          echo "Building Image..."
          // sh "docker build --file=Dockerfile --tag=${SERVICE_NAME}:latest --rm=true ."
          echo "Running Image..."
          // sh "docker run -d --rm --log-driver=gelf --log-opt gelf-address=${LOGSTASH_URI} --network=${SERVICE_TEST_NETWORK} --name=${SERVICE_NAME} --publish=${SERVICE_PORT}:${SERVICE_PORT} --volume=${SERVICE_NAME}-vol:/var/lib/${SERVICE_NAME}/${SERVICE_NAME}-vol ${SERVICE_NAME}:latest"
     }   
  }
  
}
